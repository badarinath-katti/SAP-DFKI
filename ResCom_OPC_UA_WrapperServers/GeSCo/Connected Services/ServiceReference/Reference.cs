//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeSCo.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataContracts.GetSFCsDC", Namespace="http://schemas.datacontract.org/2004/07/MESimulationService")]
    [System.SerializableAttribute()]
    public partial class DataContractsGetSFCsDC : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SFCsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SFCs {
            get {
                return this.SFCsField;
            }
            set {
                if ((object.ReferenceEquals(this.SFCsField, value) != true)) {
                    this.SFCsField = value;
                    this.RaisePropertyChanged("SFCs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ServiceReference.IMESimulationService")]
    public interface IMESimulationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC", ReplyAction="urn:IMESimulationService/getNextSFCResponse")]
        System.Xml.Linq.XElement getNextSFC(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC", ReplyAction="urn:IMESimulationService/getNextSFCResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> getNextSFCAsync(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC_Revised", ReplyAction="urn:IMESimulationService/getNextSFC_RevisedResponse")]
        System.Xml.Linq.XElement getNextSFC_Revised(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC_Revised", ReplyAction="urn:IMESimulationService/getNextSFC_RevisedResponse")]
        System.Threading.Tasks.Task<System.Xml.Linq.XElement> getNextSFC_RevisedAsync(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC_AsString", ReplyAction="urn:IMESimulationService/getNextSFC_AsStringResponse")]
        GeSCo.ServiceReference.DataContractsGetSFCsDC getNextSFC_AsString(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/getNextSFC_AsString", ReplyAction="urn:IMESimulationService/getNextSFC_AsStringResponse")]
        System.Threading.Tasks.Task<GeSCo.ServiceReference.DataContractsGetSFCsDC> getNextSFC_AsStringAsync(int SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/SetSFCToComplete", ReplyAction="urn:IMESimulationService/SetSFCToCompleteResponse")]
        bool SetSFCToComplete(string SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/SetSFCToComplete", ReplyAction="urn:IMESimulationService/SetSFCToCompleteResponse")]
        System.Threading.Tasks.Task<bool> SetSFCToCompleteAsync(string SFCCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/testmethod", ReplyAction="urn:IMESimulationService/testmethodResponse")]
        void testmethod();
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMESimulationService/testmethod", ReplyAction="urn:IMESimulationService/testmethodResponse")]
        System.Threading.Tasks.Task testmethodAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMESimulationServiceChannel : GeSCo.ServiceReference.IMESimulationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MESimulationServiceClient : System.ServiceModel.ClientBase<GeSCo.ServiceReference.IMESimulationService>, GeSCo.ServiceReference.IMESimulationService {
        
        public MESimulationServiceClient() {
        }
        
        public MESimulationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MESimulationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MESimulationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MESimulationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Xml.Linq.XElement getNextSFC(int SFCCount) {
            return base.Channel.getNextSFC(SFCCount);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> getNextSFCAsync(int SFCCount) {
            return base.Channel.getNextSFCAsync(SFCCount);
        }
        
        public System.Xml.Linq.XElement getNextSFC_Revised(int SFCCount) {
            return base.Channel.getNextSFC_Revised(SFCCount);
        }
        
        public System.Threading.Tasks.Task<System.Xml.Linq.XElement> getNextSFC_RevisedAsync(int SFCCount) {
            return base.Channel.getNextSFC_RevisedAsync(SFCCount);
        }
        
        public GeSCo.ServiceReference.DataContractsGetSFCsDC getNextSFC_AsString(int SFCCount) {
            return base.Channel.getNextSFC_AsString(SFCCount);
        }
        
        public System.Threading.Tasks.Task<GeSCo.ServiceReference.DataContractsGetSFCsDC> getNextSFC_AsStringAsync(int SFCCount) {
            return base.Channel.getNextSFC_AsStringAsync(SFCCount);
        }
        
        public bool SetSFCToComplete(string SFCCount) {
            return base.Channel.SetSFCToComplete(SFCCount);
        }
        
        public System.Threading.Tasks.Task<bool> SetSFCToCompleteAsync(string SFCCount) {
            return base.Channel.SetSFCToCompleteAsync(SFCCount);
        }
        
        public void testmethod() {
            base.Channel.testmethod();
        }
        
        public System.Threading.Tasks.Task testmethodAsync() {
            return base.Channel.testmethodAsync();
        }
    }
}
